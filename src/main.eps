import loc;
import moveRule.dispatcher;
import moveRule.move;
import board;
import check;
import checkmate;
import utils;

function onPluginStart() {
  board.initBoard();
}

var lastClickedUnitPtr = 0;
var whoShouldPlay = $P7;
var currentTurn = 1;

function placeCursor(x, y, cursorUnit, unitPlayer) {
  loc.moveCLoc(x, y);
  CreateUnit(1, cursorUnit, 'cLoc', unitPlayer);
}


function afterTriggerExec () {
  SetInvincibility(Enable, '(any unit)', AllPlayers, 'Anywhere');
  const clickedUnitPtr = dwread_epd(EPD(0x6284E8));


  if (lastClickedUnitPtr != clickedUnitPtr) {
    if (clickedUnitPtr != 0) {
      const unitEPD = EPD(clickedUnitPtr);
      const unitX, unitY = dwbreak(dwread_epd(unitEPD + 0x28 / 4))[[0, 1]];
      const unitCellX = (unitX - loc.c11x) / 64 + 1;
      const unitCellY = (unitY - loc.c11y) / 64 + 1;
      const unitPlayer = bread_epd(unitEPD + 0x4C / 4, 0);
      const unitType = wread_epd(unitEPD + (0x64 / 4), 0);

      if (unitPlayer == whoShouldPlay) { // TODO: revive this
      // if (1) {
        if (utils.isUnitTypePiece(unitType)) {
          utils.RemoveCursors();
          dispatcher.calcMovablePos(unitType, unitPlayer, unitCellX, unitCellY, currentTurn, f_placeCursor);
        }

        else if (utils.isUnitTypeCursor(unitType)) {
          utils.RemoveCursors();

          // lastClickedUnitPtr를 이 위치로 옮기면 됩니다.
          const lastUnitEPD = EPD(lastClickedUnitPtr);
          const lastUnitX, lastUnitY = dwbreak(dwread_epd(lastUnitEPD + 0x28 / 4))[[0, 1]];
          const lastUnitCellX = (lastUnitX - loc.c11x) / 64 + 1;
          const lastUnitCellY = (lastUnitY - loc.c11y) / 64 + 1;
          const lastUnitType = wread_epd(lastUnitEPD + (0x64 / 4), 0);

          board.removeBoard(unitCellX, unitCellY);
          board.removeBoard(lastUnitCellX, lastUnitCellY);
          utils.RemoveCursors();

          move.movePiece(lastUnitCellX, lastUnitCellY, unitCellX, unitCellY, unitType, lastUnitType, unitPlayer, currentTurn);
          whoShouldPlay = (whoShouldPlay == $P7) ? $P8 : $P7;
          currentTurn++;

          if (check.checkCheck(currentTurn, whoShouldPlay)) {
            setcurpl(P1);
            DisplayText('Check');
          }

          if (checkmate.checkmateOrStalemate(currentTurn, whoShouldPlay)) {
            setcurpl(P1);
            DisplayText('Checkmate or Stalemate');
          }
        }
      }
    }
    lastClickedUnitPtr = clickedUnitPtr;
  }
}