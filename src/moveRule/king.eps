import loc;
import board;

function calcMovablePos(unitPlayer, unitCellX, unitCellY, currentTurn, cb: EUDFuncPtr(4, 0)) {
  const opponentPlayer = (unitPlayer == $P7) ? $P8 : $P7;

  var x, y;

  const initialXList = [
    unitCellX - 1,
    unitCellX - 1,
    unitCellX - 1,
    unitCellX,

    unitCellX + 1,
    unitCellX + 1,
    unitCellX + 1,
    unitCellX
  ];

  const initialYList = [
    unitCellY - 1,
    unitCellY ,
    unitCellY + 1,
    unitCellY + 1,

    unitCellY + 1,
    unitCellY ,
    unitCellY - 1,
    unitCellY - 1,
  ];


  for (var i = 0 ; i < 8 ; i++) {
    x = initialXList[i];
    y = initialYList[i];

    if (1 <= x && x <= 8 && 1 <= y && y <= 8) {
      const otherCellPlayer = board.getBoard(x, y)[[0]];
      if (otherCellPlayer == 0) {
        cb(x, y, $U('Cursor'), unitPlayer);
      } else if (otherCellPlayer == unitPlayer);
      else if (otherCellPlayer == opponentPlayer) {
        cb(x, y, $U('Cursor'), unitPlayer);
      }
    }
  }

  // 캐슬링 처리
  const kingLastMovedTurn = board.getBoard(unitCellX, unitCellY)[[2]];
  if (kingLastMovedTurn == 0) {
    // assert (unitCellX == 4)
    // 양쪽 룩을 체크합시다.

    // 왼쪽 캐슬링
    if (
      (board.getBoard(3, unitCellY)[[0]] == 0) &&
      (board.getBoard(2, unitCellY)[[0]] == 0)
    ) {
      const p, ut, lmt = board.getBoard(1, unitCellY);
      if (p == unitPlayer && ut == $U('Rook') && lmt == 0) {
        cb(unitCellX - 2, unitCellY, $U('Castling'), unitPlayer);
      }
    }

    // 오른쪽 캐슬링
    if (
      (board.getBoard(5, unitCellY)[[0]] == 0) &&
      (board.getBoard(6, unitCellY)[[0]] == 0) &&
      (board.getBoard(7, unitCellY)[[0]] == 0)
    ) {
      const p, ut, lmt = board.getBoard(8, unitCellY);
      if (p == unitPlayer && ut == $U('Rook') && lmt == 0) {
        cb(unitCellX + 2, unitCellY, $U('Castling'), unitPlayer);
      }
    }
  }
}
