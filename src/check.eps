import board;
import moveRule.pawn;
import moveRule.rook;
import moveRule.bishop;
import moveRule.king;
import moveRule.queen;
import moveRule.knight;


/**
  [checkingPlayer]가 지금 공격받고있는지 판단한다.
 */
function checkCheck(currentTurn, checkingPlayer: TrgPlayer) {
  var x, y;
  const opponentPlayer = (checkingPlayer == $P7) ? $P8 : $P7;
  var isKingBeingCaptured = 0;

  // 킹을 잡을 경우 isKingBeingCaptured 값을 1로 설정
  const checkCapturing = function (x, y, cursorUnit, unitPlayer) {
    if (
      cursorUnit == $U('Cursor') ||
      cursorUnit == $U('EnPassent') ||
      cursorUnit == $U('Promotion')
    ) {
      const targetPlayer, targetUnitType = board.getBoard(x, y)[[0, 1]];
      if (targetPlayer == checkingPlayer && targetUnitType == $U('King')) {
        isKingBeingCaptured = 1;
      }
    }
  };

  for (y = 1 ; y <= 8 ; y++) {
    for(x = 1; x <= 8 ; x++) {
      const player, unitType = board.getBoard(x, y)[[0, 1]];
      if (player == opponentPlayer) {
        if (unitType == $U('Pawn')) {
          pawn.move(opponentPlayer, x, y, currentTurn, checkCapturing);
        }

        if (unitType == $U('Rook')) {
          rook.move(opponentPlayer, x, y, currentTurn, checkCapturing);
        }

        if (unitType == $U('Bishop')) {
          bishop.move(opponentPlayer, x, y, currentTurn, checkCapturing);
        }

        if (unitType == $U('Queen')) {
          queen.move(opponentPlayer, x, y, currentTurn, checkCapturing);
        }

        if (unitType == $U('King')) {
          king.move(opponentPlayer, x, y, currentTurn, checkCapturing);
        }

        if (unitType == $U('Knight')) {
          knight.move(opponentPlayer, x, y, currentTurn, checkCapturing);
        }

        if (isKingBeingCaptured) {
          return 1;
        }
      }
    }
  }
  return 0;  // false;
}
